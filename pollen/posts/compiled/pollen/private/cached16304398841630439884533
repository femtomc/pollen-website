((3) 0 () 2 ("head" "highlight") () (h - () (metas h - () (template . "post-template.html") (here-path . "/Users/mccoybecker/dev/newsite/pollen/posts/disc_opts.html.pm")) (doc c decoded-root c (c h1 c (u . "A small guide to SSA-based compiler optimizations")) c (c p c (u . "The middle phases of the compiler are where a lot of magic happens. For imperative languages, the representation") c (q br) c (u . "of source code at this stage is usually in static single assignment form - a beneficial representation which allows computation of useful topological properties of the source program’s call and control flow graphs.")) c (c h3 c (c (c class c (u . "subhead foldable"))) c (c a c (c (c href c (u . "javascript:toggle_div('g30402')"))) c (u . "Static single assignment form"))) c (c div c (c (c style c (u . "display:none;")) c (c id c (u . "g30402")) q (class "payload"))) c (c p c (u . "Information like dominators and the dominator tree facilitate transformations which reduce code size, eliminate unnecessary runtime execution, reduce pressure on runtime elements (like a garbage collector) before the code is further lowered and linked towards a piece of target hardware.")) c (c p c (u . "Below, I’ll cover a relatively standard set of optimizations.")) c (c h2 c (c (c class c (? . 0))) c (u . "Inlining")) c (c p c (u . "Call site (or block) inlining is a transformation which reduces the size of the program’s call graph by merging nodes together. Consider the following pseudo IR:")) c (c div c (c (c class c (? . 1))) c (c table c (c (c class c (u . "sourcetable"))) c (c tbody c (c tr c (c td c (c (c class c (u . "linenos"))) c (c div c (c (c class c (u . "linenodiv"))) c (c pre c (c span c (c (c class c (u . "normal"))) c (u . "1")) c (u . "\n") c (c span c (c (c class c (u . "normal"))) c (u . "2")) c (u . "\n") c (c span c (c (c class c (u . "normal"))) c (u . "3")) c (u . "\n") c (c span c (c (c class c (u . "normal"))) c (u . "4"))))) c (c td c (c (c class c (u . "code"))) c (c div c (c (c class c (u . "source"))) c (c pre c (q span) c (c span c (c (c class c (u . "nf"))) c (u . "foo")) c (c span c (c (c class c (u . "kt"))) c (u . ":")) c (u . " ") c (c span c (c (c class c (u . "p"))) c (u . "(")) c (c span c (c (c class c (u . "o"))) c (u . "%")) c (c span c (c (c class c (u . "mi"))) c (u . "1")) c (c span c (c (c class c (u . "p"))) c (u . ",")) c (u . " ") c (c span c (c (c class c (u . "o"))) c (u . "%")) c (c span c (c (c class c (u . "mi"))) c (u . "2")) c (c span c (c (c class c (u . "p"))) c (u . ",")) c (u . " ") c (c span c (c (c class c (u . "o"))) c (u . "%")) c (c span c (c (c class c (u . "mi"))) c (u . "3")) c (c span c (c (c class c (u . "p"))) c (u . ")")) c (u . "\n    ") c (c span c (c (c class c (u . "o"))) c (u . "%")) c (c span c (c (c class c (u . "mi"))) c (u . "4")) c (u . " ") c (c span c (c (c class c (u . "ow"))) c (u . "=")) c (u . " ") c (c span c (c (c class c (u . "n"))) c (u . "some_call")) c (c span c (c (c class c (u . "p"))) c (u . "(")) c (c span c (c (c class c (u . "o"))) c (u . "%")) c (c span c (c (c class c (u . "mi"))) c (u . "2")) c (c span c (c (c class c (u . "p"))) c (u . ",")) c (u . " ") c (c span c (c (c class c (u . "o"))) c (u . "%")) c (c span c (c (c class c (u . "mi"))) c (u . "3")) c (c span c (c (c class c (u . "p"))) c (u . ")")) c (u . "\n    ") c (c span c (c (c class c (u . "o"))) c (u . "%")) c (c span c (c (c class c (u . "mi"))) c (u . "5")) c (u . " ") c (c span c (c (c class c (u . "ow"))) c (u . "=")) c (u . " ") c (c span c (c (c class c (u . "n"))) c (u . "some_other_call")) c (c span c (c (c class c (u . "p"))) c (u . "(")) c (c span c (c (c class c (u . "o"))) c (u . "%")) c (c span c (c (c class c (u . "mi"))) c (u . "4")) c (c span c (c (c class c (u . "p"))) c (u . ",")) c (u . " ") c (c span c (c (c class c (u . "o"))) c (u . "%")) c (c span c (c (c class c (u . "mi"))) c (u . "3")) c (c span c (c (c class c (u . "p"))) c (u . ")")) c (u . "\n    ") c (c span c (c (c class c (u . "n"))) c (u . "return")) c (u . " ") c (c span c (c (c class c (u . "o"))) c (u . "%")) c (c span c (c (c class c (u . "mi"))) c (u . "5")) c (u . "\n")))))))) c (c h2 c (c (c class c (? . 0))) c (u . "Scalar replacement of aggregates")) c (c h2 c (c (c class c (? . 0))) c (u . "Loop-invariant code motion")) c (c p c (u . "Loop-invariant code motion is mostly what it sounds like: moving statements outside of control flow when they do not affect the runtime semantics of the program.")) c (c p c (u . "This is very generic - but considering this example:")) c (c div c (c (c class c (? . 1))) c (c table c (c (c class c (u . "sourcetable"))) c (c tbody c (c tr c (c td c (c (c class c (u . "linenos"))) c (c div c (c (c class c (u . "linenodiv"))) c (c pre c (c span c (c (c class c (u . "normal"))) c (u . "1")) c (u . "\n") c (c span c (c (c class c (u . "normal"))) c (u . "2")) c (u . "\n") c (c span c (c (c class c (u . "normal"))) c (u . "3")) c (u . "\n") c (c span c (c (c class c (u . "normal"))) c (u . "4")) c (u . "\n") c (c span c (c (c class c (u . "normal"))) c (u . "5")) c (u . "\n") c (c span c (c (c class c (u . "normal"))) c (u . "6")) c (u . "\n") c (c span c (c (c class c (u . "normal"))) c (u . "7")) c (u . "\n") c (c span c (c (c class c (u . "normal"))) c (u . "8"))))) c (c td c (c (c class c (u . "code"))) c (c div c (c (c class c (u . "source"))) c (c pre c (q span) c (c span c (c (c class c (u . "kt"))) c (u . "void")) c (u . " ") c (c span c (c (c class c (u . "nf"))) c (u . "f")) c (c span c (c (c class c (u . "p"))) c (u . "(")) c (c span c (c (c class c (u . "kt"))) c (u . "int")) c (u . " ") c (c span c (c (c class c (u . "n"))) c (u . "x")) c (c span c (c (c class c (u . "p"))) c (u . ")")) c (u . " ") c (c span c (c (c class c (u . "p"))) c (u . "{")) c (u . "\n    ") c (c span c (c (c class c (u . "kt"))) c (u . "int")) c (u . " ") c (c span c (c (c class c (u . "n"))) c (u . "i")) c (u . " ") c (c span c (c (c class c (u . "o"))) c (u . "=")) c (u . " ") c (c span c (c (c class c (u . "mi"))) c (u . "0")) c (c span c (c (c class c (u . "p"))) c (u . ";")) c (u . "\n    ") c (c span c (c (c class c (u . "kt"))) c (u . "int")) c (u . " ") c (c span c (c (c class c (u . "n"))) c (u . "n")) c (u . " ") c (c span c (c (c class c (u . "o"))) c (u . "=")) c (u . " ") c (c span c (c (c class c (u . "mi"))) c (u . "50")) c (c span c (c (c class c (u . "p"))) c (u . ";")) c (u . "\n    ") c (c span c (c (c class c (u . "k"))) c (u . "while")) c (c span c (c (c class c (u . "p"))) c (u . "(")) c (c span c (c (c class c (u . "n"))) c (u . "i")) c (u . " ") c (c span c (c (c class c (u . "o"))) q "<") c (u . " ") c (c span c (c (c class c (u . "mi"))) c (u . "50")) c (c span c (c (c class c (u . "p"))) c (u . "){")) c (u . "\n        ") c (c span c (c (c class c (u . "n"))) c (u . "x")) c (u . " ") c (c span c (c (c class c (u . "o"))) c (u . "=")) c (u . " ") c (c span c (c (c class c (u . "n"))) c (u . "x")) c (u . " ") c (c span c (c (c class c (u . "o"))) c (u . "+")) c (u . " ") c (c span c (c (c class c (u . "n"))) c (u . "n")) c (c span c (c (c class c (u . "p"))) c (u . ";")) c (u . "\n        ") c (c span c (c (c class c (u . "n"))) c (u . "y")) c (u . " ") c (c span c (c (c class c (u . "o"))) c (u . "=")) c (u . " ") c (c span c (c (c class c (u . "n"))) c (u . "x")) c (c span c (c (c class c (u . "p"))) c (u . ";")) c (u . "\n    ") c (c span c (c (c class c (u . "p"))) c (u . "}")) c (u . "\n") c (c span c (c (c class c (u . "p"))) c (u . "}")) c (u . "\n")))))))) c (c h2 c (c (c class c (? . 0))) c (u . "Dead code elimination")) c (c h2 c (c (c class c (? . 0))) c (u . "Common subexpression elimination")) c (c h2 c (c (c class c (? . 0))) c (u . "Instruction combining")) c (c h2 c (c (c class c (? . 0))) c (u . "Loop unrolling")))))