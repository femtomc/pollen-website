((3) 0 () 0 () () (u . "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Probabilistic programming, the first part</title>\n    <script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3.0.1/es5/tex-mml-chtml.js\">\n    </script>\n    <script type=\"text/javascript\">\n    function toggle_div(id) {\n        e = document.getElementById(id);\n        if (e.style.display == 'block') {\n            e.style.display = 'none';\n        }\n        else if (e.style.display == 'none') {\n            e.style.display = 'block';\n        }\n    }\n    </script>\n    <link rel=\"stylesheet\" type=\"text/css\"\n          media=\"all\" href=\"../css/posts.css\"/>\n    <link rel=\"stylesheet\" type=\"text/css\"\n          media=\"all\" href=\"../css/fonts.css\"/>\n</head>\n    <body>\n    <div id=\"doc\"><h1>Probabilistic programming, the first part</h1><p>The goal of probabilistic programming is to automate the computational process described by Bayes’ rule:</p><p><mathjax>\\begin{equation}P(A | B) = \\frac{P(B | A) P(A)}{P(B)}\\end{equation}</mathjax></p><p>This computational process is hard–because the computation of the denominator involves an integral</p><p><mathjax>\\begin{equation}P(B) = \\int_{dom(A)} P(A, B) \\ dA\\end{equation}</mathjax></p><p>So, generically, practitioners of probabilistic programming explore spaces where this computational process can be reduced to another, more tractable process - or the integral can be evaluated analytically.</p></div>\n</body>"))